const ASSERT = (x) => {
  if (!x) rollback(x.toString(), 0)
}

const DOESNT_EXIST = -5

const sto = [
  0x11, 0x00, 0x61, 0x22, 0x00, 0x00, 0x00, 0x00, 0x24, 0x04, 0x1f, 0x94, 0xd9,
  0x25, 0x04, 0x5e, 0x84, 0xb7, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x55, 0x13, 0x40,
  0xb3, 0x25, 0x86, 0x31, 0x96, 0xb5, 0x6f, 0x41, 0xf5, 0x89, 0xeb, 0x7d, 0x2f,
  0xd9, 0x4c, 0x0d, 0x7d, 0xb8, 0x0e, 0x4b, 0x2c, 0x67, 0xa7, 0x78, 0x2a, 0xd6,
  0xc2, 0xb0, 0x77, 0x50, 0x62, 0x40, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x79, 0x94,
  0x81, 0x14, 0x37, 0xdf, 0x44, 0x07, 0xe7, 0xaa, 0x07, 0xf1, 0xd5, 0xc9, 0x91,
  0xf2, 0xd3, 0x6f, 0x9e, 0xb8, 0xc7, 0x34, 0xaf, 0x6c,
]

// test_sto_erase
const Hook = (arg) => {
  // erase field 22
  {
    const buf = sto_erase(sto, 0x20002)
    ASSERT(buf.length === sto.length - 5)

    ASSERT(buf[0] === sto[0] && buf[1] === sto[1] && buf[2] === sto[2])
    for (let i = 3; i < sto.length - 5; i++) {
      ASSERT(sto[i + 5] === buf[i])
    }
  }

  // test front erasure
  {
    const buf = sto_erase(sto, 0x10001)
    ASSERT(buf.length === sto.length - 3)

    for (let i = 3; i < sto.length - 3; i++) {
      ASSERT(sto[i] === buf[i - 3])
    }
  }

  // test back erasure
  {
    const buf = sto_erase(sto, 0x80001)
    ASSERT(buf.length === sto.length - 22)

    for (let i = 0; i < sto.length - 22; i++) {
      ASSERT(sto[i] === buf[i])
    }
  }

  // test not found
  {
    const buf = sto_erase(sto, 0x80002)
    // TODO: https://github.com/Xahau/xahaud/issues/459
    // ASSERT(buf === DOESNT_EXIST)
  }

  // test total erasure
  {
    const rep = [0x22, 0x10, 0x20, 0x30, 0x40]
    const buf = sto_erase(rep, 0x20002)
    ASSERT(buf.length === 0)
  }

  accept('success', 0)
}
