const ASSERT = (x, code) => {
  if (!x) {
    trace('error', 0, false)
    rollback(x.toString(), code)
  }
}

// secp256k1
const pubkey_sec = [
  0x02, 0xc7, 0x38, 0x7f, 0xfc, 0x25, 0xc1, 0x56, 0xca, 0x7f, 0x8a, 0x6d, 0x76,
  0x0c, 0x8d, 0x01, 0xef, 0x64, 0x2c, 0xee, 0x9c, 0xe4, 0x68, 0x0c, 0x33, 0xff,
  0xb3, 0xff, 0x39, 0xaf, 0xec, 0xfe, 0x70,
]

const sig_sec = [
  0x30, 0x45, 0x02, 0x21, 0x00, 0x95, 0x6e, 0x7d, 0x1f, 0x01, 0x16, 0xf1, 0x65,
  0x00, 0xd2, 0xcc, 0xd8, 0x8d, 0x2a, 0x2f, 0xef, 0xf6, 0x52, 0x16, 0x85, 0x42,
  0xf4, 0x4e, 0x43, 0xdb, 0xe6, 0xf4, 0x53, 0xe8, 0x03, 0xb8, 0x4f, 0x02, 0x20,
  0x0a, 0xb6, 0xc3, 0x4b, 0x5f, 0x0c, 0xc6, 0x6b, 0x4f, 0x1f, 0x83, 0xe9, 0x89,
  0x74, 0xb8, 0x80, 0xa2, 0x2f, 0xae, 0x52, 0x91, 0x6b, 0xa2, 0xce, 0x96, 0xa3,
  0x61, 0x05, 0x3f, 0xff, 0x81, 0xe9,
]

// ed25519
const pubkey_ed = [
  0xed, 0xd9, 0xb3, 0x59, 0x98, 0x02, 0xb2, 0x14, 0xa9, 0x9d, 0x75, 0x77, 0x12,
  0xd6, 0xab, 0xdf, 0x72, 0xf8, 0x3c, 0x63, 0xbb, 0xd5, 0x38, 0x61, 0x41, 0x17,
  0x90, 0xb1, 0x3d, 0x04, 0xb2, 0xc5, 0xc9,
]

const sig_ed = [
  0x56, 0x68, 0x80, 0x76, 0x70, 0xfe, 0xce, 0x60, 0x34, 0xaf, 0xd6, 0xcd, 0x1b,
  0xb4, 0xc6, 0x60, 0xae, 0x08, 0x39, 0x6d, 0x6d, 0x8b, 0x7d, 0x22, 0x71, 0x3b,
  0xda, 0x26, 0x43, 0xc1, 0xe1, 0x91, 0xc4, 0xe4, 0x4d, 0x8e, 0x02, 0xe8, 0x57,
  0x8b, 0x20, 0x45, 0xda, 0xd4, 0x8f, 0x97, 0xfc, 0x16, 0xf8, 0x92, 0x5b, 0x6b,
  0x51, 0xfb, 0x3b, 0xe5, 0x0f, 0xb0, 0x4b, 0x3a, 0x20, 0x4c, 0x53, 0x04,
]

const msg = [0xde, 0xad, 0xbe, 0xef]
const bmsg = [0xad, 0xbe, 0xef]

const Hook = (arg) => {
  // test secp256k1 verification
  ASSERT(util_verify(msg, sig_sec, pubkey_sec) === 1)
  ASSERT(util_verify(bmsg, sig_sec, pubkey_sec) === 0)

  // test ed25519 verification
  ASSERT(util_verify(msg, sig_ed, pubkey_ed) === 1)
  ASSERT(util_verify(bmsg, sig_ed, pubkey_ed) === 0)

  accept('', 0)
}
